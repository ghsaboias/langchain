from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains.history_aware_retriever import \
    create_history_aware_retriever
from langchain.chains.retrieval import create_retrieval_chain
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import WebBaseLoader
from langchain_community.vectorstores.faiss import FAISS
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import ChatOpenAI, OpenAIEmbeddings


def get_documents_from_web(url):
    """
    Retrieves documents from a given URL.

    Args:
        url (str): The URL from which to retrieve the documents.

    Returns:
        list: A list of split documents.

    """
    loader = WebBaseLoader(url)
    docs = loader.load()
    
    # split the documents into chunks
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=400,
        chunk_overlap=20,
    )
    split_docs = splitter.split_documents(docs)
    
    return split_docs

def create_vector_db(docs):
    """
    Creates a vector database using the given documents.
    
    Args:
        docs (list): A list of documents.
        
    Returns:
        vector_db: A vector database created using the given documents.
    """
    embedding = OpenAIEmbeddings()
    vector_db = FAISS.from_documents(docs, embedding)
    return vector_db

def create_chain(vector_db: FAISS):
    """
    Creates a retrieval chain for generating responses based on user input and conversation history.

    Args:
        vector_db (FAISS): The vector database used for document retrieval.

    Returns:
        retrieval_chain: The retrieval chain that combines the history-aware retriever with the chain that generates the response.
    """
    model = ChatOpenAI(
        model="gpt-3.5-turbo-1106",
        temperature=0.4,
    )

    prompt = ChatPromptTemplate.from_messages([
        ("system", "Answer the user's questions based on the context: {context}"),
        MessagesPlaceholder("chat_history"),
        ("human", "{input}")
    ])

    chain = create_stuff_documents_chain(
        llm=model,
        prompt=prompt,
    )

    # creates a retriever that retrieves the top 3 most fitting documents to the user input
    retriever = vector_db.as_retriever(search_kwargs={"k": 3})

    # combines the chat history with the user input, being responsible for generating a unique query for the vector db for the relevant documents
    retriever_prompt = ChatPromptTemplate.from_messages([
        MessagesPlaceholder(variable_name="chat_history"),
        ("human", "{input}"),
        ("human", "Given the above conversation, generate a search query to retrieve documents relevant to the conversation.")
    ])

    # creates a history-aware retriever that uses the retriever, the chat history, and the user input to generate a query for the vector db
    history_aware_retriever = create_history_aware_retriever(
        llm=model,
        retriever=retriever,
        prompt=retriever_prompt
    )

    # creates a retrieval chain that combines the history-aware retriever with the chain that generates the response
    retrieval_chain = create_retrieval_chain(
        history_aware_retriever,
        chain,
    )

    return retrieval_chain

def process_chat(chain, question, chat_history):
    """
    Process a chat conversation by invoking the language model chain.

    Args:
        chain (LanguageModelChain): The language model chain to be invoked.
        question (str): The question to be asked.
        chat_history (list): The chat history as a list of previous conversation messages.

    Returns:
        str: The answer generated by the language model chain.
    """
    response = chain.invoke({
        "input": question,
        "chat_history": chat_history,
    })

    return response["answer"]

if __name__ == "__main__":
    docs = get_documents_from_web("https://python.langchain.com/docs/expression_language/")
    vector_db = create_vector_db(docs)
    chain = create_chain(vector_db)
    
    # chat history is a list of messages that the user and the assistant have exchanged
    chat_history = [
        HumanMessage(content="Hello! My name is Gui. I am a developer and I am learning Langchain. Your goal is to help me in learning Langchain."),
    ]
    
    while True:
        user_input = input("Type /quit to quit.\nPrompt: ")
        
        if user_input == "/quit":
            break
        
        # invoke chain with user input and chat history
        response = process_chat(chain, user_input, chat_history)
        # append the user input and the assistant response to the chat history
        chat_history.append(HumanMessage(content=user_input))
        chat_history.append(AIMessage(content=response))
        print("Assistant: ", response)
    